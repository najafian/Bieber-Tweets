{"version":3,"sources":["serviceWorker.ts","shared/type/action-case.ts","component/reducer/twitter-reducer.ts","shared/reducer/index.ts","shared/reducer/store.ts","component/twitter-initial-page.tsx","component/twitter-result-page.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","REQUEST","actionType","SUCCESS","FAILURE","ACTION_TYPES","initialState","twitterApiUrl","twitterApiGetAndSave","twitterApiGetResultFromDB","rootReducer","combineReducers","twitterApiReducer","state","action","type","payload","data","defaultMiddleWares","thunkMiddleware","promiseMiddleware","composedMiddleWares","middleWares","compose","applyMiddleware","initialize","createStore","reducer","TwitterInitialPage","props","appName","TextBox","consumeKey","consumeSecurityKey","PinID","keywordInput","PinIDBtn","showResultBtn","ResultFromTwitterBtn","Button","prevProps","prevState","snapshot","this","open","resultTweets","JSON","stringify","console","log","length","history","push","result","initializeInputBox","input","title","value","ID","placeholder","floatLabelType","appendTo","getPinUri","getDataFromTwitter","showResult","element","addEventListener","getResultFromDB","conKey","conSecKey","pinID","keywordSearch","getResultFromTwitter","applicationName","consumerKey","consumerSecurityKey","alert","loadPinIDFromTwitterUri","consumerSecretKey","className","style","margin","id","React","Component","mapDispatchToProps","entity","axios","get","put","connect","Grid","Inject","Selection","Sort","Filter","Page","TwitterResultPage","grid","convertDate","dateTime","date","Date","date1","getDate","getFullYear","getMonth","getHours","getMinutes","map","a","userDate","twitterDate","listResult","convertDateFormat","dataSource","allowSelection","allowFiltering","allowPaging","pageSettings","pageSize","allowSorting","filterSettings","enableHover","height","enableAltRow","rowHeight","gridLines","columns","field","headerText","isPrimaryKey","width","clipMode","filter","globalStore","ReactDOM","render","store","createBrowserHistory","path","component","TwitterAuthPage","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22979e7b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Appends REQUEST async action type\n */\n\nexport const REQUEST = (actionType: any) => `${actionType}_PENDING`;\n\n/**\n * Appends SUCCESS async action type\n */\n\nexport const SUCCESS = (actionType: any) => `${actionType}_FULFILLED`;\n\n/**\n * Appends FAILURE async action type\n */\n\nexport const FAILURE = (actionType: any) => `${actionType}_REJECTED`;","import axios from 'axios';\nimport {IPayloadResult} from \"../../shared/type/IPayload\";\nimport {FAILURE, REQUEST, SUCCESS} from \"../../shared/type/action-case\";\nimport {IParamInput} from \"../../shared/type/IParamInput\";\n\n\nexport const ACTION_TYPES = {\n    TWITTER_URL: ':api/TWITTER_URL',\n    TWITTER_RESULT: ':api/TWITTER_RESULT',\n    TWITTER_SAVE: ':api/TWITTER_SAVE'\n};\n\nconst initialState = {\n    twitterApiUrl: '',\n    twitterApiGetAndSave: [],\n    twitterApiGetResultFromDB: []\n};\n\nexport type TwitterApiReducerType = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: TwitterApiReducerType = initialState, action: any): TwitterApiReducerType => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.TWITTER_URL):\n        case REQUEST(ACTION_TYPES.TWITTER_RESULT):\n        case REQUEST(ACTION_TYPES.TWITTER_SAVE):\n            return {\n                ...state,\n            };\n        case FAILURE(ACTION_TYPES.TWITTER_URL):\n        case FAILURE(ACTION_TYPES.TWITTER_RESULT):\n        case FAILURE(ACTION_TYPES.TWITTER_SAVE):\n            return {\n                ...state,\n            };\n        case SUCCESS(ACTION_TYPES.TWITTER_URL):\n            return {\n                ...state,\n                twitterApiUrl: action.payload.data\n            };\n        case SUCCESS(ACTION_TYPES.TWITTER_RESULT):\n            return {\n                ...state,\n                twitterApiGetResultFromDB: action.payload.data\n            };\n        case SUCCESS(ACTION_TYPES.TWITTER_SAVE):\n            return {\n                ...state,\n                twitterApiGetAndSave: action.payload.data\n            };\n        default:\n            return state;\n    }\n};\n\n// Actions\nexport const loadPinIDFromTwitterUri: IPayloadResult<any> = (entity: IParamInput) => ({\n    type: ACTION_TYPES.TWITTER_URL,\n    payload: axios.get('/api/GenerateUrl?consumerKey=' + entity.consumerKey + '&consumerSecretKey=' + entity.consumerSecretKey)\n});\n\nexport const getResultFromTwitter: IPayloadResult<any> = (entity: any) => ({\n    type: ACTION_TYPES.TWITTER_SAVE,\n    payload: axios.put('/api', entity)\n});\n\nexport const getResultFromDB: IPayloadResult<any> = (entity: any) => ({\n    type: ACTION_TYPES.TWITTER_RESULT,\n    payload: axios.get('/api', entity)\n});","import {combineReducers} from 'redux';\nimport twitterApiReducer, {TwitterApiReducerType} from \"../../component/reducer/twitter-reducer\";\n\n\nexport interface IRootState {\n    readonly twitterApiReducer: TwitterApiReducerType;\n}\n\nconst rootReducer = combineReducers<IRootState>({\n    twitterApiReducer\n});\n\nexport default rootReducer;","import {createStore, applyMiddleware, compose} from 'redux';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer, {IRootState} from \"./index\";\n\nconst defaultMiddleWares = [\n    thunkMiddleware,\n    promiseMiddleware\n];\nconst composedMiddleWares = (middleWares:any) => compose(applyMiddleware(...defaultMiddleWares, ...middleWares));\n\nconst initialize = (initialState?: IRootState, middleWares = [] as any[]) => createStore(reducer, initialState, composedMiddleWares(middleWares));\n\nexport default initialize;","import React from 'react';\nimport {RouteComponentProps} from \"react-router\";\nimport {IRootState} from \"../shared/reducer\";\nimport {TextBox} from '@syncfusion/ej2-inputs';\nimport {Button} from '@syncfusion/ej2-buttons';\nimport {connect} from \"react-redux\";\nimport {loadPinIDFromTwitterUri, getResultFromTwitter, getResultFromDB} from \"./reducer/twitter-reducer\";\n\ninterface ICardInstituteProps extends StateProps, DispatchProps, RouteComponentProps<{}> {\n}\n\nclass TwitterInitialPage extends React.Component<ICardInstituteProps> {\n    private appName: TextBox = new TextBox();\n    private consumeKey: TextBox = new TextBox();\n    private consumeSecurityKey: TextBox = new TextBox();\n    private PinID: TextBox = new TextBox();\n    private keywordInput: TextBox = new TextBox();\n    private PinIDBtn: Button;\n    private showResultBtn: Button;\n    private ResultFromTwitterBtn: Button;\n\n    constructor(props: any) {\n        super(props);\n        this.PinIDBtn = new Button();\n        this.showResultBtn = new Button();\n        this.ResultFromTwitterBtn = new Button();\n\n    }\n\n    componentDidUpdate(prevProps: Readonly<ICardInstituteProps>, prevState: Readonly<{}>, snapshot?: any): void {\n        if (this.props.twitterApiReducer.twitterApiUrl !== prevProps.twitterApiReducer.twitterApiUrl) {\n            window.open(this.props.twitterApiReducer.twitterApiUrl);\n        }\n        let twitterApiGetAndSave = this.props.twitterApiReducer.twitterApiGetAndSave;\n        if (twitterApiGetAndSave !== prevProps.twitterApiReducer.twitterApiGetAndSave) {\n            let resultTweets = JSON.stringify(twitterApiGetAndSave);\n            console.log(resultTweets);\n            console.log(twitterApiGetAndSave.length);\n        }\n        let twitterApiGetResultFromDB = this.props.twitterApiReducer.twitterApiGetResultFromDB;\n        if (twitterApiGetResultFromDB !== prevProps.twitterApiReducer.twitterApiGetResultFromDB) {\n            console.log(twitterApiGetResultFromDB);\n            this.props.history.push('/result-page', {result: twitterApiGetResultFromDB});\n        }\n    }\n\n    componentDidMount(): void {\n        const initializeInputBox = (input: TextBox, title: string, value: string, ID: string) => {\n            input.placeholder = title;\n            input.floatLabelType = 'Auto';\n            input.value = value;\n            input.appendTo('#' + ID);\n        };\n        initializeInputBox(this.appName, 'Application Name', 'java-exercise', 'appNameID');\n        initializeInputBox(this.consumeKey, 'consume Key ID', 'RLSrphihyR4G2UxvA0XBkLAdl', 'consumeKeyID');\n        initializeInputBox(this.consumeSecurityKey, 'consume Security KeyID', 'FTz2KcP1y3pcLw0XXMX5Jy3GTobqUweITIFy4QefullmpPnKm4', 'consumeSecurityKeyID');\n        initializeInputBox(this.PinID, 'Pin ID', '', 'PinIDInput');\n        initializeInputBox(this.keywordInput, 'Keyword search', 'Bieber', 'keywordInput');\n        this.PinIDBtn.appendTo('#PinIDBtn');\n        this.ResultFromTwitterBtn.appendTo('#saveInDBBtn');\n        this.showResultBtn.appendTo('#showResultBtn');\n\n        this.getPinUri();\n        this.getDataFromTwitter();\n        this.showResult();\n    }\n\n    private showResult() {\n        this.props.history.push('/main-rps-game');\n        this.showResultBtn.element.addEventListener('click', () => {\n            this.props.getResultFromDB();\n        });\n    }\n\n    private getDataFromTwitter() {\n        this.ResultFromTwitterBtn.element.addEventListener('click', () => {\n            let conKey = this.consumeKey.value;\n            let conSecKey = this.consumeSecurityKey.value;\n            let pinID = this.PinID.value;\n            let keywordSearch = this.keywordInput.value;\n            if (conKey.length > 0 &&\n                conSecKey.length > 0 &&\n                keywordSearch.length > 0)\n                this.props.getResultFromTwitter({\n                    applicationName: this.appName.value,\n                    consumerKey: conKey,\n                    consumerSecurityKey: conSecKey,\n                    keywordSearch: keywordSearch,\n                    pinID: pinID\n                });\n            else\n                alert('please fill all inputs!');\n        });\n    }\n\n    private getPinUri() {\n        this.PinIDBtn.element.addEventListener('click', () => {\n            this.PinID.value = '';\n            let conKey = this.consumeKey.value;\n            let conSecKey = this.consumeSecurityKey.value;\n            if (conKey.length > 0 && conSecKey.length > 0)\n                this.props.loadPinIDFromTwitterUri({\n                    consumerKey: conKey,\n                    consumerSecretKey: conSecKey\n                });\n            else\n                alert('please fill consumerKey and consumerSecurityKey!');\n        });\n    }\n\n    render(): any {\n        return <div>\n            <div className=\"panel-box\">\n                <div className=\"col-md-10\" style={{margin: '0 auto'}}>\n                    <div className=\"image-logo\"/>\n                    <div className={\"row\"}>\n                        <div className=\"col-md-6\"><input id=\"appNameID\"/></div>\n                        <div className=\"col-md-6\"><input id=\"keywordInput\"/></div>\n                    </div>\n                    <div className=\"topPadding\">\n                        <input id=\"consumeKeyID\"/>\n                    </div>\n                    <div className=\"topPadding\">\n                        <input id=\"consumeSecurityKeyID\"/>\n                    </div>\n                    <div className=\"topPadding\">\n                        <div id=\"PinIDBtn\">Get PinID From Twitter</div>\n                    </div>\n                    <div className=\"topPadding\">\n                        <input id=\"PinIDInput\"/>\n                    </div>\n                    <div className=\"topPadding\">\n                        <div id=\"saveInDBBtn\">Get tweets and save into DB</div>\n                    </div>\n                    <div className=\"topPadding\">\n                        <div id=\"showResultBtn\">Show Result</div>\n                    </div>\n\n                </div>\n            </div>\n        </div>;\n    }\n}\n\nconst mapStateToProps = ({twitterApiReducer}: IRootState) => ({\n    twitterApiReducer\n});\n\nconst mapDispatchToProps = {\n    loadPinIDFromTwitterUri,\n    getResultFromTwitter,\n    getResultFromDB\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(TwitterInitialPage);","import React from 'react';\nimport {RouteComponentProps} from \"react-router\";\nimport {Grid, Sort, Filter, Selection, Page} from '@syncfusion/ej2-grids';\n\ninterface IResult {\n    user: string;\n    userDate: string;\n    text: string;\n    twitterDate: string;\n    screenName: string;\n}\n\nGrid.Inject(Selection, Sort, Filter, Page);\nexport default class TwitterResultPage extends React.Component<RouteComponentProps<{}>> {\n    grid: Grid;\n\n    constructor(props: any) {\n        super(props);\n        this.grid = new Grid();\n    }\n\n    convertDateFormat(result: any): any {\n        const convertDate = (dateTime: string) => {\n            let date = new Date(dateTime);\n            let date1 = date.getDate();\n            let fullYear = date.getFullYear();\n            let month = date.getMonth() + 1;\n            let hours = date.getHours();\n            let minutes = date.getMinutes();\n            return (fullYear + '/' + month + '/' + date1 + ' ' + hours + ':' + minutes);\n        };\n        return (result as IResult[]).map(a => {\n            return {...a, userDate: convertDate(a.userDate), twitterDate: convertDate(a.twitterDate)}\n        })\n    }\n\n    componentDidMount(): void {\n        let state = this.props.location.state;\n        let listResult = this.convertDateFormat((this.props.location.state as any).result);\n        console.log('state: ', state);\n        this.grid = new Grid({\n            dataSource: listResult,\n            allowSelection: true,\n            allowFiltering: true,\n            allowPaging: true,\n            pageSettings: {pageSize: 13},\n            allowSorting: true,\n            filterSettings: {type: 'Menu'},\n            enableHover: false,\n            height: 380,\n            enableAltRow: true,\n            rowHeight: 29,\n            gridLines: 'Both',\n            columns: [\n                {\n                    field: 'user',  headerText: 'User', isPrimaryKey: true, width: '130',clipMode: 'EllipsisWithTooltip'\n                }, {\n                    field: 'userDate', headerText: 'userDate', width: '90',\n                    filter: {type: 'Menu'}\n                }, {\n                    field: 'text', headerText: 'tweet', width: '170',\n                    filter: {type: 'CheckBox'}, clipMode: 'EllipsisWithTooltip'\n                }, {\n                    field: 'twitterDate', headerText: 'tweet Date', width: '90', filter: {type: 'Menu'}\n                }, {\n                    field: 'screenName', width: '140', headerText: 'screenName', filter: {type: 'CheckBox'},\n                }\n            ]\n        });\n        this.grid.appendTo('#grid');\n    }\n\n    render(): React.ReactElement<any, string | React.JSXElementConstructor<any>> | string | number | {} | React.ReactNodeArray | React.ReactPortal | boolean | null | undefined {\n        return <div>\n            <div className=\"panel-box\" style={{width: '1000px'}}>\n                <div id=\"grid\"/>\n            </div>\n        </div>;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport './contents/styles/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@syncfusion/ej2/bootstrap.css';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport initialize from \"./shared/reducer/store\";\nimport {Route, Router, Switch} from \"react-router\";\nimport {createBrowserHistory} from 'history'\nimport TwitterAuthPage from './component/twitter-initial-page'\nimport TwitterResultPage from './component/twitter-result-page'\n\n\nexport const globalStore = initialize();\n\nReactDOM.render(\n    <Provider store={globalStore}>\n        <div className=\"fullScreen-page-class\">\n            <div className=\"image-background-class\">\n                <div className=\"center-form-class\">\n                    <Router history={createBrowserHistory()}>\n                        <Switch>\n                            <Route path=\"/result-page\" component={TwitterResultPage}/>\n                            <Route component={TwitterAuthPage} path=\"/\"/>\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n            <div className=\"page-footer-class\">This is Demo Project By Mehdi Najafian</div>\n        </div>\n    </Provider>\n    , document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}